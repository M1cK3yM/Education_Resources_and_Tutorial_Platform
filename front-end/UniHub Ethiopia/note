import { useEffect, useRef, useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "../components/ui/button";
import { Card, CardContent, CardFooter } from "../components/ui/card";

function EventCard({ title, date, note, imageUrl, detailsUrl }) {
  const [isVisible, setIsVisible] = useState(false);
  const cardRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => {
      if (cardRef.current) {
        observer.unobserve(cardRef.current);
      }
    };
  }, []);

  return (
    <Card
      ref={cardRef}
      className={`bg-background text-foreground mt-4 mb-6 w-full max-w-4xl mx-auto transition-all duration-500 ${
        isVisible
          ? "opacity-100 translate-y-0 scale-100"
          : "opacity-0 translate-y-4 scale-95"
      } shadow-lg hover:shadow-xl`}
    >
      <Link to={detailsUrl} className="block">
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row md:items-center">
            <div className="md:w-2/3 md:pr-6">
              <p className="text-sm md:text-base font-semibold text-muted-foreground mb-2">
                {date}
              </p>
              <h2 className="text-2xl md:text-3xl font-bold mb-2">{title}</h2>
              <p className="text-sm md:text-base text-muted-foreground mb-4 line-clamp-3">
                {note}
              </p>
            </div>
            <div className="md:w-1/3 mt-4 md:mt-0">
              <img
                src={imageUrl}
                alt={title}
                className="w-full h-48 md:h-64 object-cover rounded-lg shadow-md"
                loading="lazy"
              />
            </div>
          </div>
        </CardContent>
        <CardFooter className="px-6 pb-6">
          <Button>See Event Details</Button>
        </CardFooter>
      </Link>
    </Card>
  );
}

export default EventCard;

import { useState, useEffect } from "react";
import NewsCard from "../components/newscard";
import { Button } from "../components/ui/button";
import { Loader } from "rsuite";
import { newsApi } from "@/api";
import { requestHandler } from "@/utils/requestHandler";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationPrevious,
  PaginationLink,
  PaginationNext,
} from "@/components/ui/pagination";

const NewsPage = () => {
  const [newsData, setNewsData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    const fetchNews = async (currentPage) => {
      try {
        await requestHandler(
          () => newsApi.getAllNews(currentPage),
          setLoading,
          (data) => {
            setNewsData(data.resource);
            setTotalPages(data.pages);
          },
          (error) => setError(error)
        );
      } catch (err) {
        setError("Failed to fetch News");
        console.log(err);
      } finally {
        setLoading(false);
      }
    };
    fetchNews(currentPage);
  }, [currentPage]);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  return (
    <div>
      <div className="relative bg-cover bg-center h-64 md:h-96 lg:h-[500px] shadow-2xl">
        <div className="absolute inset-0 flex flex-col items-center justify-center text-center text-foreground p-4 md:p-8 lg:p-12">
          <h1 className="text-3xl md:text-5xl lg:text-6xl font-bold">
            News and Updates
          </h1>
          <p className="mt-4 text-lg md:text-xl lg:text-2xl">
            Stay informed with the latest news and updates
          </p>
        </div>
      </div>
      {loading ? (
        <div className="flex justify-center items-center h-full">
          <Loader size="md" />
        </div>
      ) : newsData.length === 0 ? (
        <div className="flex flex-col  items-center justify-center h-screen">
          <h1 className="text-4xl font-bold mb-4 text-foreground">
            ðŸ˜”Oops! You Caught us With no News
          </h1>
          <p className="text-foreground text-2xl">
            Sorry, we will add news Soon or Not .
          </p>
          <div className="mt-4 text-center text-lg ">
            <p className="text-gray-600 mb-6"> You might want to explore:</p>
            <a href="/" className=" p-2 hover:underline">
              <Button>Home</Button>
            </a>
            <a href="/resources" className=" p-2 hover:underline ml-2">
              <Button>Resources</Button>
            </a>
            <a href="/contact" className=" p-2 hover:underline ml-2">
              <Button>Contact </Button>
            </a>
          </div>
        </div>
      ) : (
        <>
          <ul>
            {newsData.map((article) => (
              <NewsCard
                key={article._id}
                title={article.title}
                date={article.date}
                description={article.description}
                imageUrl={article.imageUrl}
                detailsUrl={`/news/${article.id}`}
              />
            ))}
          </ul>
          <div className="flex justify-center mt-8">
            {totalPages > 0 && (
              <Pagination>
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious
                      disabled={currentPage === 1}
                      onClick={() =>
                        currentPage == 1
                          ? null
                          : handlePageChange(currentPage - 1)
                      }
                    />
                  </PaginationItem>
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(
                    (page) => (
                      <PaginationItem key={page}>
                        <PaginationLink
                          isActive={page === currentPage}
                          onClick={() => handlePageChange(page)}
                        >
                          {page}
                        </PaginationLink>
                      </PaginationItem>
                    )
                  )}
                  <PaginationItem>
                    <PaginationNext
                      disabled={currentPage === totalPages}
                      onClick={() =>
                        currentPage == totalPages
                          ? null
                          : handlePageChange(currentPage + 1)
                      }
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default NewsPage;

import React from "react";
import { Link } from "react-router-dom";
import { useEffect, useState, useRef } from "react";
import { Button } from "./ui/button";

function NewsCard({ title, date, description, imageUrl, detailsUrl }) {
  const [isVisible, setIsVisible] = useState(false);
  const cardRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => {
      if (cardRef.current) {
        observer.unobserve(cardRef.current);
      }
    };
  }, []);

  return (
    <div
      ref={cardRef}
      className={`bg-transparent text-foreground mt-2 p-6 my-2 max-w-xl w-4/5 mx-auto flex md:flex-row md:items-center transition-transform duration-500 ${
        isVisible
          ? "animate-slide-in-up animate-zoom-in"
          : "opacity-0 translate-y-4"
      } shadow-2xl`}
    >
      <div className="bg-transparent overflow-hidden my-4 md:my-8 flex flex-row">
        <div className="md:flex-shrink-0 md:w-1/2">
          <img
            className="h-64 w-full object-cover md:h-auto"
            src={imageUrl}
            alt={title}
          />
        </div>
        <div className="p-6 flex-1 flex flex-col justify-between">
          <div>
            <div className="uppercase tracking-wide text-sm text-indigo-500 font-semibold">
              {date}
            </div>
            <Link
              to={detailsUrl}
              className="block mt-1 text-lg leading-tight font-medium text-black hover:underline"
            >
              {title}
            </Link>
            <p className="mt-2 text-gray-500">{description}</p>
          </div>
          <div className="mt-4">
            <Link to={detailsUrl}>
              <Button>Read More</Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

export default NewsCard;

// import { useEffect, useState } from "react";
// import EventCard from "../components/eventCard";
// import { Button } from "@/components/ui/button";
// import { Loader } from "rsuite";
// import { eventsApi } from "@/api";
// import { requestHandler } from "@/utils/requestHandler";
// import {
//   Pagination,
//   PaginationContent,
//   PaginationItem,
//   PaginationPrevious,
//   PaginationLink,
//   PaginationNext,
// } from "@/components/ui/pagination";

// function EventsPage() {
//   const [events, setEvents] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const [currentPage, setCurrentPage] = useState(1);
//   const [totalPages, setTotalPages] = useState(0);

//   useEffect(() => {
//     if (!error) {
//       fetchEvents(currentPage);
//     } else {
//       setLoading(false);
//     }
//   }, [currentPage, error]);

//   const fetchEvents = async (currentPage) => {
//     try {
//       await requestHandler(
//         () => eventsApi.getAllEvents(currentPage),
//         setLoading,
//         (data) => {
//           setEvents(data.events);
//           setTotalPages(data.pages);
//         },
//         (error) => setError(error)
//       );
//     } catch (error) {
//       console.error("Error fetching events:", error);
//       setError(error);
//     }
//   };

//   const handlePageChange = (page) => {
//     setCurrentPage(page);
//   };

//   return (
//     <div className="min-h-screen bg-background">
//       <div className="relative bg-cover bg-center h-48 sm:h-64 md:h-96 lg:h-[500px] shadow-2xl rounded-3xl">
//         <div className="absolute inset-0 flex flex-col items-center justify-center text-center text-foreground p-4 md:p-8 lg:p-12">
//           <h1 className="text-2xl sm:text-3xl md:text-5xl lg:text-6xl font-bold">
//             Educational and Resource Platform
//           </h1>
//           <p className="mt-2 sm:mt-4 text-base sm:text-lg md:text-xl lg:text-2xl">
//             Empowering Students and Educators
//           </p>
//         </div>
//       </div>

//       <div className="container mx-auto px-4 py-8">
//         {loading ? (
//           <div className="flex justify-center items-center h-64">
//             <Loader size="md" />
//           </div>
//         ) : error ? (
//           <div className="text-center text-red-500">
//             <p>Error loading events. Please try again later.</p>
//           </div>
//         ) : events.length === 0 ? (
//           <div className="flex flex-col items-center justify-center text-center">
//             <h2 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-4 text-foreground">
//               ðŸ˜” Oops! You Caught us With no Events
//             </h2>
//             <p className="text-foreground text-lg sm:text-xl md:text-2xl mb-6">
//               Sorry, we will add new events Soon or Not.
//             </p>
//             <div className="flex flex-wrap justify-center gap-4">
//               <Button asChild>
//                 <a href="/">Home</a>
//               </Button>
//               <Button asChild>
//                 <a href="/resources">Resources</a>
//               </Button>
//               <Button asChild>
//                 <a href="/contact">Contact</a>
//               </Button>
//             </div>
//           </div>
//         ) : (
//           <>
//             <ul className="space-y-6">
//               {events.map((event) => (
//                 <EventCard
//                   key={event._id}
//                   title={event.title}
//                   date={
//                     event.date
//                       ? new Date(event.date).toLocaleDateString()
//                       : "Date not available"
//                   }
//                   note={event.note}
//                   imageUrl={event.image}
//                   detailsUrl={`/events/${event._id}`}
//                   eventId={event._id}
//                 />
//               ))}
//             </ul>
//             <div className="flex justify-center mt-8">
//               {totalPages > 0 && (
//                 <Pagination>
//                   <PaginationContent className="flex-wrap justify-center">
//                     <PaginationItem>
//                       <PaginationPrevious
//                         disabled={currentPage === 1}
//                         onClick={() =>
//                           currentPage === 1
//                             ? null
//                             : handlePageChange(currentPage - 1)
//                         }
//                       />
//                     </PaginationItem>
//                     {Array.from({ length: totalPages }, (_, i) => i + 1).map(
//                       (page) => (
//                         <PaginationItem key={page}>
//                           <PaginationLink
//                             isActive={page === currentPage}
//                             onClick={() => handlePageChange(page)}
//                           >
//                             {page}
//                           </PaginationLink>
//                         </PaginationItem>
//                       )
//                     )}
//                     <PaginationItem>
//                       <PaginationNext
//                         disabled={currentPage === totalPages}
//                         onClick={() =>
//                           currentPage === totalPages
//                             ? null
//                             : handlePageChange(currentPage + 1)
//                         }
//                       />
//                     </PaginationItem>
//                   </PaginationContent>
//                 </Pagination>
//               )}
//             </div>
//           </>
//         )}
//       </div>
//     </div>
//   );
// }

// export default EventsPage;

// import { useEffect, useState } from "react";
// import { useParams } from "react-router-dom";
// import NewsCard from "@/components/newscard";
// import axios from "axios";
// import {
//   FaTelegramPlane,
//   FaFacebook,
//   FaLinkedin,
//   FaInstagram,
//   FaTwitter,
//   FaWhatsapp,
// } from "react-icons/fa";

// const NewsDetailPage = () => {
//   const { newsId } = useParams();
//   const [oneNews, setOneNews] = useState(null);
//   const [news, setNews] = useState([]);
//   const currentUrl = window.location.href;

//   useEffect(() => {
//     const fetchnewsDetails = async () => {
//       try {
//         const endPoint = `http://localhost:3000/api/news/${newsId}`;
//         const response = await axios.get(endPoint);
//         setOneNews(response.data);
//         const responseData = await axios.get("http://localhost:3000/api/news");
//         setNews(responseData.data);
//       } catch (err) {
//         console.error("Error fetching news details:", err);
//       }
//     };

//     if (newsId) {
//       fetchnewsDetails();
//     }
//   }, [newsId]);

//   if (!oneNews) {
//     return (
//       <div className="flex justify-center items-center h-screen">
//         Loading...
//       </div>
//     );
//   }

//   const handleCopyLink = () => {
//     navigator.clipboard.writeText(currentUrl);
//     alert("Link copied to clipboard. Share it on Instagram!");
//   };

//   return (
//     <div className="text-foreground font-sans">
//       <main className="container mx-auto mt-20 px-4 md:px-0">
//         <div className="flex justify-around">
//           <div>
//             <div className="flex max-w-lg h-auto">
//               <img
//                 src={oneNews.image}
//                 alt={oneNews.title}
//                 className="object-cover rounded mr-10"
//               />
//             </div>
//             <div className="mt-8 text-left  mt-20 max-w-3xl">
//               <h1 className="text-4xl font-bold mt-4">{oneNews.title}</h1>
//             </div>
//             <div>{oneNews.content}</div>
//           </div>
//           <div className="max-w-3xl">
//             {news.map((news) => (
//               <NewsCard
//                 key={news._id}
//                 title={news.title}
//                 content={news.content}
//                 image={news.image}
//               />
//             ))}
//           </div>
//         </div>
//       </main>

//       <section className="mt-12 py-12">
//         <div className="w-1/2">
//           <p className="mt-6 w-auto text-base">{oneNews.content}</p>
//           <p className="mt-8 text-base">
//             Help us spread the word by sharing this page!
//           </p>
//           <div className="my-2 flex space-x-4 overflow-visible">
//             <a
//               href={`https://t.me/share/url?url=${encodeURIComponent(
//                 currentUrl
//               )}&text=${encodeURIComponent(oneNews.title)}`}
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-blue-500 hover:text-blue-600"
//             >
//               <FaTelegramPlane size={30} />
//             </a>
//             <a
//               href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
//                 currentUrl
//               )}`}
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-blue-700"
//             >
//               <FaFacebook size={30} />
//             </a>
//             <a
//               href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(
//                 currentUrl
//               )}&title=${encodeURIComponent(oneNews.title)}`}
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-blue-800 hover:text-blue-900"
//             >
//               <FaLinkedin size={30} />
//             </a>
//             <button onClick={handleCopyLink} className="text-pink-600 ">
//               <FaInstagram size={30} />
//             </button>
//             <a
//               href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(
//                 currentUrl
//               )}&text=${encodeURIComponent(oneNews.title)}`}
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-blue-500 hover:text-blue-600"
//             >
//               <FaTwitter size={30} />
//             </a>
//             <a
//               href={`https://api.whatsapp.com/send?text=${encodeURIComponent(
//                 `${oneNews.title} ${currentUrl}`
//               )}`}
//               target="_blank"
//               rel="noopener noreferrer"
//               className="text-green-500 hover:text-green-600"
//             >
//               <FaWhatsapp size={30} />
//             </a>
//           </div>
//           <hr />
//         </div>
//       </section>
//     </div>
//   );
// };

// export default NewsDetailPage;



// // import { useEffect, useState } from "react";
// // import { Button } from "@/components/ui/button";
// // import { Input } from "@/components/ui/input";
// // import { eventsApi } from "@/api";
// // import { requestHandler } from "@/utils/requestHandler";
// // import EventForm from "@/components/admin/eventForm"; // Separate component for creating/updating events
// // import EventCardAdmin from "@/components/admin/eventCardAdmin.jsx"; // Admin-specific event card

// // function AdminEventsPage() {
// //   const [events, setEvents] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [error, setError] = useState(null);
// //   const [currentPage, setCurrentPage] = useState(1);
// //   const [totalPages, setTotalPages] = useState(0);
// //   const [editingEvent, setEditingEvent] = useState(null); // Event to edit or null

// //   useEffect(() => {
// //     if (!error) {
// //       fetchEvents(currentPage);
// //     }
// //   }, [currentPage]);

// //   const fetchEvents = async (currentPage) => {
// //     try {
// //       await requestHandler(
// //         () => eventsApi.getAllEvents(currentPage),
// //         setLoading,
// //         (data) => {
// //           setEvents(data.events);
// //           setTotalPages(data.pages);
// //         },
// //         (error) => setError(error)
// //       );
// //     } catch (error) {
// //       console.error("Error fetching events:", error);
// //     }
// //   };

// //   const handleCreateOrUpdateEvent = async (eventData) => {
// //     if (editingEvent) {
// //       // Update event
// //       await requestHandler(
// //         () => eventsApi.updateEvent(editingEvent._id, eventData),
// //         setLoading,
// //         (updatedEvent) => {
// //           setEvents(
// //             events.map((event) =>
// //               event._id === updatedEvent._id ? updatedEvent : event
// //             )
// //           );
// //           setEditingEvent(null);
// //         },
// //         (error) => setError(error)
// //       );
// //     } else {
// //       // Create new event
// //       await requestHandler(
// //         () => eventsApi.createEvent(eventData),
// //         setLoading,
// //         (newEvent) => setEvents([...events, newEvent]),
// //         (error) => setError(error)
// //       );
// //     }
// //   };

// //   const handleDeleteEvent = async (eventId) => {
// //     await requestHandler(
// //       () => eventsApi.deleteEvent(eventId),
// //       setLoading,
// //       () => setEvents(events.filter((event) => event._id !== eventId)),
// //       (error) => setError(error)
// //     );
// //   };

// //   const handlePageChange = (page) => setCurrentPage(page);

// //   return (
// //     <div className="p-8">
// //       <div className="flex justify-between items-center mb-8">
// //         <Input className="w-64" placeholder="Search..." />
// //         <Button onClick={() => setEditingEvent(null)}>Create New Event</Button>
// //       </div>

// //       {/* Event Form for creating/updating */}
// //       {editingEvent || !loading ? (
// //         <EventForm event={editingEvent} onSubmit={handleCreateOrUpdateEvent} />
// //       ) : (
// //         <>
// //           {events.map((event) => (
// //             <EventCardAdmin
// //               key={event._id}
// //               event={event}
// //               onEdit={() => setEditingEvent(event)}
// //               onDelete={() => handleDeleteEvent(event._id)}
// //             />
// //           ))}
// //           <div className="flex justify-center mt-8">
// //             {/* Pagination logic */}
// //             {/* Your pagination code goes here */}
// //           </div>
// //         </>
// //       )}
// //     </div>
// //   );
// // }

// // export default AdminEventsPage;

// import { useEffect, useState } from "react";
// import { Button } from "@/components/ui/button";
// import EventCard from "@/components/admin/eventCardAdmin"; // Adjust the import based on your structure
// import { eventsApi } from "@/api"; // Adjust this import based on your API setup
// import { requestHandler } from "@/utils/requestHandler"; // Handle requests, as you did in EventsPage

// const AdminEventsPage = () => {
//   const [events, setEvents] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const [showForm, setShowForm] = useState(false);
//   const [currentEvent, setCurrentEvent] = useState(null); // For updating an event

//   const [currentPage, setCurrentPage] = useState(1);
//   const [totalPages, setTotalPages] = useState(0);

//   useEffect(() => {
//     if (!error) {
//       fetchEvents(currentPage);
//     } else {
//       setLoading(false);
//     }
//   }, [currentPage]);

//   const fetchEvents = async (currentPage) => {
//     try {
//       await requestHandler(
//         () => eventsApi.getAllEvents(currentPage),
//         setLoading,
//         (data) => {
//           setEvents(data.events);
//           console.log(data);
//           setTotalPages(data.pages);
//         },
//         (error) => setError(error)
//       );
//     } catch (error) {
//       console.error("Error fetching events:", error);
//     }
//   };

//   const handleDelete = async (eventId) => {
//     // Implement delete functionality here
//     // Call your API to delete the event and update the state
//   };

//   const handleUpdate = (event) => {
//     setCurrentEvent(event);
//     setShowForm(true); // Show the form for updating the event
//   };

//   const handleCreate = () => {
//     setCurrentEvent(null); // Clear current event for new creation
//     setShowForm(true); // Show the form for creating a new event
//   };

//   return (
//     <div className="p-4">
//       <h1 className="text-2xl font-bold mb-4">Manage Events</h1>
//       <Button onClick={handleCreate} className="mb-4">
//         Add Event
//       </Button>

//       {showForm && (
//         <EventForm
//           event={currentEvent}
//           onClose={() => {
//             setShowForm(false);
//             fetchEvents(); // Refresh events after creating/updating
//           }}
//         />
//       )}

//       {loading ? (
//         <p>Loading...</p>
//       ) : error ? (
//         <p>Error fetching events: {error.message}</p>
//       ) : events.length === 0 ? (
//         <p>No events available.</p>
//       ) : (
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           {events.map((event) => (
//             <EventCard
//               key={event._id}
//               title={event.title}
//               date={event.date}
//               note={event.note}
//               imageUrl={event.image}
//             >
//               <div className="flex justify-between mt-4">
//                 <Button onClick={() => handleUpdate(event)}>Update</Button>
//                 <Button
//                   onClick={() => handleDelete(event._id)}
//                   variant="destructive"
//                 >
//                   Delete
//                 </Button>
//               </div>
//             </EventCard>
//           ))}
//         </div>
//       )}
//     </div>
//   );
// };

// export default AdminEventsPage;



const updateEvent = async (req, res) => {
  try {
    const updateData = {
      title: req.body.title,
      description: req.body.description,
      note: req.body.note,
      location: req.body.location,
      date: req.body.date,
      time: req.body.time,
    };

    if (req.file) {
      updateData.image = req.file.path; // Update Cloudinary URL in the database
    }
    if (!req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: "Invalid Event ID" });
    }
    const event = await Event.findByIdAndUpdate(req.params.id, updateData, {
      new: true,
    });

    if (!event) {
      return res.status(404).json({ message: "Event not found" });
    }

    res.json(event);
  } catch (err) {
    console.error("Error updating event:", err);
    res.status(500).json({ message: "Server Error" });
  }
};




// // import { useEffect, useState } from "react";
// // import { useParams } from "react-router-dom";
// // import { eventsApi } from "@/api";
// // import { requestHandler } from "@/utils/requestHandler";
// // import { Loader } from "rsuite";

// // const EventRsvp = () => {
// //   // const { eventId } = useParams(); // Get eventId from route parameters
// //   const eventId = "66ecb251954fa540c5cb460d";
// //   console.log(eventId);
// //   const [rsvps, setRsvps] = useState([]);
// //   const [loading, setLoading] = useState(true);
// //   const [error, setError] = useState(null);

// //   useEffect(() => {
// //     fetchRsvps();
// //   }, [eventId]);

// //   const fetchRsvps = async () => {
// //     try {
// //       await requestHandler(
// //         () => eventsApi.getEventRsvps(eventId), // Fetch RSVP responses for the event
// //         setLoading,
// //         (data) => {
// //           setRsvps(data);
// //         },
// //         (error) => setError(error)
// //       );
// //     } catch (error) {
// //       console.error("Error fetching RSVPs:", error);
// //     }
// //   };

// //   return (
// //     <div className="p-4">
// //       <h1 className="text-2xl font-bold mb-4">Event RSVPs</h1>
// //       {loading ? (
// //         <Loader size="md" />
// //       ) : error ? (
// //         <p>Error fetching RSVPs: {error.message}</p>
// //       ) : rsvps.length === 0 ? (
// //         <p>No RSVPs available for this event.</p>
// //       ) : (
// //         <div className="grid grid-cols-1 gap-4">
// //           {rsvps.map((rsvp) => (
// //             <div key={rsvp._id} className="p-4 border shadow-lg rounded-md">
// //               <p>
// //                 <strong>Name:</strong> {rsvp.name}
// //               </p>
// //               <p>
// //                 <strong>Email:</strong> {rsvp.email}
// //               </p>
// //               <p>
// //                 <strong>Guests:</strong> {rsvp.numberOfGuests}
// //               </p>
// //             </div>
// //           ))}
// //         </div>
// //       )}
// //     </div>
// //   );
// // };

// // export default EventRsvp;

// import { useEffect, useState } from "react";
// import { eventsApi } from "@/api";
// import { requestHandler } from "@/utils/requestHandler";
// import { Loader } from "rsuite";
// import EventCard from "@/components/admin/eventCardAdmin";

// const EventRsvp = () => {
//   const [events, setEvents] = useState([]);
//   const [selectedEventId, setSelectedEventId] = useState(null);
//   const [rsvps, setRsvps] = useState([]);
//   const [rsvpsLength, setRsvpsLength] = useState(0);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const [loadingRsvps, setLoadingRsvps] = useState(false);

//   useEffect(() => {
//     fetchEvents();
//   }, []);

//   const fetchEvents = async () => {
//     try {
//       await requestHandler(
//         () => eventsApi.getAllEvents(), // Fetch all events
//         setLoading,
//         (data) => {
//           setEvents(data.events);
//           console.log(data.events);
//         },
//         (error) => setError(error)
//       );
//     } catch (error) {
//       console.error("Error fetching events:", error);
//     }
//   };

//   const fetchRsvps = async (eventId) => {
//     setSelectedEventId(eventId);
//     setLoadingRsvps(true);
//     setError(null);
//     try {
//       await requestHandler(
//         () => eventsApi.getEventRsvps(eventId), // Fetch RSVPs for the specific event
//         setLoadingRsvps,
//         (data) => {
//           setRsvps(data);
//           setRsvpsLength(data.length);
//           console.log(data);
//           console.log(data.length);
//         },
//         (error) => setError(error)
//       );
//     } catch (error) {
//       console.error("Error fetching RSVPs:", error);
//     }
//   };

//   return (
//     <div className="p-4">
//       <h1 className="text-2xl font-bold mb-4">Event RSVPs</h1>
//       {loading ? (
//         <Loader size="md" />
//       ) : error ? (
//         <p>Error fetching events: {error.message}</p>
//       ) : events.length === 0 ? (
//         <p>No events available.</p>
//       ) : (
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           {events.map((event) => (
//             <EventCard
//               key={event._id}
//               title={event.title}
//               date={event.date}
//               note={event.note}
//               imageUrl={event.image}
//             >
//               <div className="flex justify-between mt-4">
//                 <button
//                   onClick={() => fetchRsvps(event._id)}
//                   className="bg-blue-500 text-white px-4 py-2 rounded"
//                 >
//                   Show Responses
//                 </button>
//                 <div>Total Response : {rsvpsLength}</div>
//               </div>
//             </EventCard>
//           ))}
//         </div>
//       )}
//     </div>
//   );
// };

// export default EventRsvp;

// // : selectedEventId && rsvps.length > 0 ? (
// //   <div className="mt-4">
// //     <h3 className="text-lg font-bold">
// //       RSVPs for Event {selectedEventId}
// //     </h3>
// //     {rsvps.map((rsvp) => (
// //       <div key={rsvp._id} className="p-4 border shadow-lg rounded-md">
// //         <p>
// //           <strong>Name:</strong> {rsvp.name}
// //         </p>
// //         <p>
// //           <strong>Email:</strong> {rsvp.email}
// //         </p>
// //         <p>
// //           <strong>Guests:</strong> {rsvp.numberOfGuests}
// //         </p>
// //       </div>
// //     ))}
// //   </div>
// // )

i